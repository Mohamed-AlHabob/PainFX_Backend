version: '3.9'

services:
  backend:
    build:
      context: ./backend
    container_name: painfx_backend
    env_file: .env
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - mynetwork
    volumes:
      - ./backend:/app:z  # Add :z for SELinux environments
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery:
    build:
      context: ./backend
      dockerfile: ../infrastructure/celery/celery-worker/Dockerfile
    container_name: painfx_celery
    env_file: .env
    depends_on:
      - db
      - redis
      - backend
    networks:
      - mynetwork
    volumes:
      - ./backend:/app:z  # Add :z for SELinux environments
    command: ["celery", "-A", "core", "worker", "--loglevel=info"]

  celery-flower:
    build:
      context: ./backend
      dockerfile: ../infrastructure/celery/celery-flower/Dockerfile
    container_name: painfx_celery_flower
    env_file: .env
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - backend
      - celery
    networks:
      - mynetwork
    volumes:
      - ./backend:/app:z  # Add :z for SELinux environments
    command: ["celery", "-A", "core", "flower", "--port=5555", "--loglevel=info", "--scheduler", "django_celery_beat.schedulers:DatabaseScheduler"]

  redis:
    image: redis:6.2
    container_name: painfx_redis
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:15
    container_name: painfx_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - mynetwork
    volumes:
      - postgres_data:/var/lib/postgresql/data:z  # Add :z for SELinux environments

  nginx:
    image: nginx:latest
    container_name: painfx_nginx
    ports:
      - "80:80"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro,z  # Add :z for SELinux environments
    depends_on:
      - backend
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # frontend:
  #   build:
  #     context: ../Full_Frontend
  #   container_name: painfx_frontend
  #   env_file: ../Full_Frontend/.env.production
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - mynetwork
  #   volumes:
  #     - ../Full_Frontend:/app  # Live code reloading for frontend

networks:
  mynetwork:
    driver: bridge

volumes:
  postgres_data:
